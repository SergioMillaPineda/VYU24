// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using WorkersManagementAdminMode.Infrastructure.Contracts.Entities;

namespace WorkersManagementAdminMode.Infrastructure.Impl.DbContexts
{
    public partial class WorkersManagementAdminModeContext : DbContext
    {
        public WorkersManagementAdminModeContext()
        {
        }

        public WorkersManagementAdminModeContext(DbContextOptions<WorkersManagementAdminModeContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ITWorkerEntity> ITWorkersTable { get; set; }
        public virtual DbSet<Contracts.Entities.TaskEntity> TasksTable { get; set; }
        public virtual DbSet<TeamEntity> TeamsTable { get; set; }
        public virtual DbSet<WorkerEntity> WorkersTable { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-4F9R5IV\\SQLEXPRESS;Initial Catalog=WorkersManagementAdminMode;Persist Security Info=True;User ID=sergio;Password=milla");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ITWorkerEntity>(entity =>
            {
                entity.HasKey(e => e.idWorker)
                    .HasName("PK_ITWorkersTable_1");

                entity.Property(e => e.idWorker).ValueGeneratedNever();

                entity.Property(e => e.Level)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.TechKnowledges)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.idTeamNavigation)
                    .WithMany(p => p.ITWorkersTable)
                    .HasForeignKey(d => d.idTeam)
                    .HasConstraintName("FK_ITWorkersTable_TeamsTable");

                entity.HasOne(d => d.idWorkerNavigation)
                    .WithOne(p => p.ITWorkersTable)
                    .HasForeignKey<ITWorkerEntity>(d => d.idWorker)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ITWorkersTable_WorkersTable");
            });

            modelBuilder.Entity<Contracts.Entities.TaskEntity>(entity =>
            {
                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Technology)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.idWorkerNavigation)
                    .WithMany(p => p.TasksTable)
                    .HasForeignKey(d => d.idWorker)
                    .HasConstraintName("FK_Tasks_ITWorkersTable");
            });

            modelBuilder.Entity<TeamEntity>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.idManagerNavigation)
                    .WithMany(p => p.TeamsTable)
                    .HasForeignKey(d => d.idManager)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeamsTable_TeamsTable");
            });

            modelBuilder.Entity<WorkerEntity>(entity =>
            {
                entity.Property(e => e.Birthdate).HasColumnType("date");

                entity.Property(e => e.Leavingdate).HasColumnType("date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Surname)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}